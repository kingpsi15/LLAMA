{
  "subheading": "SC-3 SECURITY FUNCTION ISOLATION",
  "start_text": "SC-3 SECURITY FUNCTION ISOLATION r\nControl:  Isola",
  "content": "SC-3 SECURITY FUNCTION ISOLATION r\nControl:  Isolate security functions from nonsecurity functions.\nDiscussion:  Security functions are isolated from nonsecurity functions by means of an isolation\nboundary implemented within a system via partitions and domains. The isolation boundary\ncontrols access to and protects the integrity of the hardware, software, and firmware that\nperform system security functions. Systems implement code separation in many ways, such as\nthrough the provision of security kernels via processor rings or processor modes. For non-kernel\ncode, security function isolation is often achieved through file system protections that protect\nthe code on disk and address space protections that protect executing code. Systems can restrict\naccess to security functions using access control mechanisms and by implementing least privilege\nCHAPTER THREE   PAGE 293\nNISTSP800-53,R.5SPCISO                                                               EV                                                                                      ECURITY AND RIVACY ONTROLS FOR NFORMATION YSTEMS AND RGANIZATIONS\n_________________________________________________________________________________________________\ncapabilities. While the ideal is for all code within the defined security function isolation boundary\nto only contain security-relevant code, it is sometimes necessary to include nonsecurity functions\nas an exception. The isolation of security functions from nonsecurity functions can be achieved\n, by applying the systems security engineering design principles in SA-8, including SA-8(1), SA-8(3)\nSA-8(4), SA-8(10), SA-8(12), SA-8(13), SA-8(14), and SA-8(18).\nRelated Controls:  AC-3, AC-6, AC-25, CM-2, CM-4, SA-4, SA-5, SA-8, SA-15, SA-17, SC-2, SC-7, SC-\n32, SC-39, SI-16.\nControl Enhancements:\n| (1) SECURITY FUNCTION ISOLATION  HARDWARE SEPARATION\nEmploy hardware separation mechanisms to implement security function isolation.\nDiscussion:  Hardware separation mechanisms include hardware ring architectures that are\nhimplemented within microprocessors and hardware-enforced address segmentation used to\nsupport logically distinct storage objects with separate attributes (i.e., readable, writeable). p\nRelated Controls:  None. lic\ni|o (2) SECURITY FUNCTION ISOLATION  ACCESS AND FLOW CONTROL FUNCTIONS\nisIsolate security functions enforcing access and information flow control from nonsecurity\nvfunctions and from other security functions.\nDiscussion:  Security function isolation occurs because of implementation. The functions can b\nstill be scanned and monitored. Security functions that are potentially isolated from access\nand flow control enforcement functions include auditing, intrusion detection, and malicious\ncode protection functions.\nRelated Controls:  None. a\n| (3) SECURITY FUNCTION ISOLATION  MINIMIZE NONSECURITY FUNCTIONALITY\nmMinimize the number of nonsecurity functions included within the isolation boundary\nhcontaining security functions.\nsDiscussion:  Where it is not feasible to achieve strict isolation of nonsecurity functions from\ndsecurity functions, it is necessary to take actions to minimize nonsecurity-relevant functions\ni.within the security function boundary. Nonsecurity functions contained within the isolation o\nboundary are considered security-relevant because errors or malicious code in the software /\ncan directly impact the security functions of systems. The fundamental design objective is .\nthat the specific portions of systems that provide information security are of minimal size 2\n/and complexity. Minimizing the number of nonsecurity functions in the security-relevant\nSsystem components allows designers and implementers to focus only on those functions\n.which are necessary to provide the desired security capability (typically access enforcement). S\nBy minimizing the nonsecurity functions within the isolation boundaries, the amount of code .\nthat is trusted to enforce security policies is significantly reduced, thus contributing to 0\nunderstandability. 3\nRelated Controls:  None.\n| (4) SECURITY FUNCTION ISOLATION  MODULE COUPLING AND COHESIVENESS\nImplement security functions as largely independent modules that maximize internal\ncohesiveness within modules and minimize coupling between modules.\nDiscussion:  The reduction of inter-module interactions helps to constrain security functions\nand manage complexity. The concepts of coupling and cohesion are important with respect\nto modularity in software design. Coupling refers to the dependencies that one module has\non other modules. Cohesion refers to the relationship between functions within a module.\nBest practices in software engineering and systems security engineering rely on layering,\nCHAPTER THREE   PAGE 294\nNISTSP800-53,R.5SPCISO                                                               EV                                                                                      ECURITY AND RIVACY ONTROLS FOR NFORMATION YSTEMS AND RGANIZATIONS\n_________________________________________________________________________________________________\nminimization, and modular decomposition to reduce and manage complexity. This produces\nsoftware modules that are highly cohesive and loosely coupled.\nRelated Controls:  None.\n| (5) SECURITY FUNCTION ISOLATION  LAYERED STRUCTURES\nImplement security functions as a layered structure minimizing interactions between\nlayers of the design and avoiding any dependence by lower layers on the functionality or\ncorrectness of higher layers.\nDiscussion:  The implementation of layered structures with minimized interactions among\nsecurity functions and non-looping layers (i.e., lower-layer functions do not depend on\nhigher-layer functions) enables the isolation of security functions and the management of\ncomplexity.\nTRelated Controls:  None.\nReferences:  None. p"
}