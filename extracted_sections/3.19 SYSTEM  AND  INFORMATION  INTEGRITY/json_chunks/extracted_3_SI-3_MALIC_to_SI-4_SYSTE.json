{
  "subheading": "SI-3 MALICIOUS CODE PROTECTION",
  "start_text": "SI-3 MALICIOUS CODE PROTECTION .\nControl: 8\nSSelec",
  "content": "SI-3 MALICIOUS CODE PROTECTION .\nControl: 8\nSSelection (one or more): signature based; non-signature baseda.Implement [] malicious code\nprotection mechanisms at system entry and exit points to detect and eradicate malicious S\n.code;\n-b.Automatically update malicious code protection mechanisms as new releases are available in\nraccordance with organizational configuration management policy and procedures;\nc.Configure malicious code protection mechanisms to:\nAssignment: organization-defined frequency1.Perform periodic scans of the system [] and\nSelection (one or more): endpoint; real-time scans of files from external sources at [\nnetwork entry and exit points] as the files are downloaded, opened, or executed in\naccordance with organizational policy; and\nSelection (one or more): block malicious code; quarantine malicious code; take 2.[\nAssignment: organization-defined actionAssignment: organization-[]]; and send alert to [\ndefined personnel or roles] in response to malicious code detection; and\nCHAPTER THREE   PAGE 334\nNISTSP800-53,R.5SPCISO                                                               EV                                                                                      ECURITY AND RIVACY ONTROLS FOR NFORMATION YSTEMS AND RGANIZATIONS\n_________________________________________________________________________________________________\nd.Address the receipt of false positives during malicious code detection and eradication and\nthe resulting potential impact on the availability of the system.\nDiscussion:  System entry and exit points include firewalls, remote access servers, workstations,\nelectronic mail servers, web servers, proxy servers, notebook computers, and mobile devices.\nMalicious code includes viruses, worms, Trojan horses, and spyware. Malicious code can also be\nencoded in various formats contained within compressed or hidden files or hidden in files using\ntechniques such as steganography. Malicious code can be inserted into systems in a variety of\nways, including by electronic mail, the world-wide web, and portable storage devices. Malicious\ncode insertions occur through the exploitation of system vulnerabilities. A variety of technologies\nand methods exist to limit or eliminate the effects of malicious code.\nMalicious code protection mechanisms include both signature- and nonsignature-based\ntechnologies. Nonsignature-based detection mechanisms include artificial intelligence\ntechniques that use heuristics to detect, analyze, and describe the characteristics or behavior of h\nmalicious code and to provide controls against such code for which signatures do not yet exist or\nbfor which existing signatures may not be effective. Malicious code for which active signatures do\nnot yet exist or may be ineffective includes polymorphic malicious code (i.e., code that changes a\nosignatures when it replicates). Nonsignature-based mechanisms also include reputation-based\nitechnologies. In addition to the above technologies, pervasive configuration management, s\ncomprehensive software integrity controls, and anti-exploitation software may be effective in v\nlpreventing the execution of unauthorized code. Malicious code may be present in commercial a\nloff-the-shelf software as well as custom-built software and could include logic bombs, backdoors, e\nrand other types of attacks that could affect organizational mission and business functions.\nIn situations where malicious code cannot be detected by detection methods or technologies, f\nhorganizations rely on other types of controls, including secure coding practices, configuration\ngmanagement and control, trusted procurement processes, and monitoring practices to ensure\nthat software does not perform functions other than the functions intended. Organizations may f\nmdetermine that, in response to the detection of malicious code, different actions may be\nhwarranted. For example, organizations can define actions in response to malicious code\ndetection during periodic scans, the detection of malicious downloads, or the detection of s\n/maliciousness when attempting to open or execute files. d\no SC-23, SC-26, SC-Related Controls:  AC-4, AC-19, CM-3, CM-8, IR-4, MA-3, MA-4, PL-9, RA-5, SC-7,\n/28, SC-44, SI-2, SI-4, SI-7, SI-8, SI-15. 1\nControl Enhancements:0\nN| (1) MALICIOUS CODE PROTECTION  CENTRAL MANAGEMENT\nT[Withdrawn: Incorporated into PL-9.]\n.| (2) MALICIOUS CODE PROTECTION  AUTOMATIC UPDATES 8\n[Withdrawn: Incorporated into SI-3.] -\n5|- (3) MALICIOUS CODE PROTECTION  NONPRIVILEGED USERS\n[Withdrawn: Incorporated into AC-6(10).]\n| (4) MALICIOUS CODE PROTECTION  UPDATES ONLY BY PRIVILEGED USERS\nUpdate malicious code protection mechanisms only when directed by a privileged user.\nDiscussion:  Protection mechanisms for malicious code are typically categorized as security-\nrelated software and, as such, are only updated by organizational personnel with\nappropriate access privileges.\nRelated Controls:  CM-5.\n| (5) MALICIOUS CODE PROTECTION  PORTABLE STORAGE DEVICES\nCHAPTER THREE   PAGE 335\nNISTSP800-53,R.5SPCISO                                                               EV                                                                                      ECURITY AND RIVACY ONTROLS FOR NFORMATION YSTEMS AND RGANIZATIONS\n_________________________________________________________________________________________________\n[Withdrawn: Incorporated into MP-7.]\n| (6) MALICIOUS CODE PROTECTION  TESTING AND VERIFICATION\nAssignment: organization-defined (a)Test malicious code protection mechanisms [\nfrequency] by introducing known benign code into the system; and\n(b)Verify that the detection of the code and the associated incident reporting occur.\nDiscussion:  None.\nRelated Controls:  CA-2, CA-7, RA-5.\n|- (7) MALICIOUS CODE PROTECTION  NONSIGNATUREBASED DETECTION\n[Withdrawn: Incorporated into SI-3.]\n| (8) MALICIOUS CODE PROTECTION  DETECT UNAUTHORIZED COMMANDS\n(a)Detect the following unauthorized operating system commands through the kernel  is\npAssignment: organization-defined system application programming interface on [\nhardware componentsAssignment: organization-defined unauthorized operating ]: [lic\nsystem commands]; and\nSelection (one or more): issue a warning; audit the command execution; prevent the (b)[\nexecution of the command]. a\nDiscussion:  Detecting unauthorized commands can be applied to critical interfaces other i\nthan kernel-based interfaces, including interfaces with virtual machines and privileged\nfapplications. Unauthorized operating system commands include commands for kernel\nefunctions from system processes that are not trusted to initiate such commands as well as\nfcommands for kernel functions that are suspicious even though commands of that type are\nreasonable for processes to initiate. Organizations can define the malicious commands to be a\ndetected by a combination of command types, command classes, or specific instances of e\nrcommands. Organizations can also define hardware components by component type,\ncomponent, component location in the network, or a combination thereof. Organizations\nmay select different actions for different types, classes, or instances of malicious commands. t\n:Related Controls:  AU-2, AU-6, AU-12.\ni| .(9) MALICIOUS CODE PROTECTION  AUTHENTICATE REMOTE COMMANDS o\n[Withdrawn: Moved to AC-17(10).]/\n| (10) MALICIOUS CODE PROTECTION  MALICIOUS CODE ANALYSIS0\n(a)Employthe following tools and techniques to analyze the characteristics and behavior /\nSAssignment: organization-defined tools and techniquesof malicious code: []; and\nS(b)Incorporate the results from malicious code analysis into organizational incident\n.response and flaw remediation processes. 8\nDiscussion:  The use of malicious code analysis tools provides organizations with a more in--\ndepth understanding of adversary tradecraft (i.e., tactics, techniques, and procedures) and r\nthe functionality and purpose of specific instances of malicious code. Understanding the\ncharacteristics of malicious code facilitates effective organizational responses to current and\nfuture threats. Organizations can conduct malicious code analyses by employing reverse\nengineering techniques or by monitoring the behavior of executing code.\nRelated Controls:  None.\nReferences:  [SP 800-83], [SP 800-125B], [SP 800-177]."
}