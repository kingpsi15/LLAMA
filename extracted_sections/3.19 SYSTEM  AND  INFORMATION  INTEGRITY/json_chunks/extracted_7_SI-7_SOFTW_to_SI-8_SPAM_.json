{
  "subheading": "SI-7 SOFTWARE, FIRMWARE, AND INFORMATION INTEGRITY",
  "start_text": "bSI-7 SOFTWARE, FIRMWARE, AND INFORMATION INTEGRIT",
  "content": "bSI-7 SOFTWARE, FIRMWARE, AND INFORMATION INTEGRITY\ntControl:  i\ni sa.Employ integrity verification tools to detect unauthorized changes tothe following software,\nvAssignment: organization-defined software, firmware, and firmware, and information: [\nlinformation]; and a\nthe software, firmware, and b.Take the following actions when unauthorized changes to f\neAssignment: organization-defined actionsinformation are detected: [].\ncDiscussion:  Unauthorized changes to software, firmware, and information can occur due to\nerrors or malicious activity. Software includes operating systems (with key internal components, r\nsuch as kernels or drivers), middleware, and applications. Firmware interfaces include Unified\nExtensible Firmware Interface (UEFI) and Basic Input/Output System (BIOS). Information includes  m\n:personally identifiable information and metadata that contains security and privacy attributes\ntassociated with information. Integrity-checking mechanisms\u2014including parity checks, cyclical p\n:redundancy checks, cryptographic hashes, and associated tools\u2014can automatically monitor the /\nointegrity of systems and hosted applications.\nRelated Controls:  AC-4, CM-3, CM-7, CM-8, MA-3, MA-4, RA-5, SA-8, SA-9, SA-10, SC-8, SC-12,\n0SC-13, SC-28, SC-37, SI-3, SR-3, SR-4, SR-5, SR-6, SR-9, SR-10, SR-11.\nControl Enhancements:\n,,| S(1) SOFTWARE FIRMWARE AND INFORMATION INTEGRITY  INTEGRITY CHECKS\nSAssignment: organization-defined software, firmware, and Perform an integrity check of [\n.informationSelection (one or more):Assignment: organization-defined ] [ at startup; at [8\n0transitional states or security-relevant eventsAssignment: organization-defined ]; [\n3frequency]].\nDiscussion:  Security-relevant events include the identification of new threats to which\norganizational systems are susceptible and the installation of new hardware, software, or\nfirmware. Transitional states include system startup, restart, shutdown, and abort.\nRelated Controls:  None.\n,,|(2) SOFTWARE FIRMWARE AND INFORMATION INTEGRITY  AUTOMATED NOTIFICATIONS OF INTEGRITY\nVIOLATIONS\nAssignment: organization-defined Employ automated tools that provide notification to [\npersonnel or roles] upon discovering discrepancies during integrity verification.\nCHAPTER THREE   PAGE 345\nNISTSP800-53,R.5SPCISO                                                               EV                                                                                      ECURITY AND RIVACY ONTROLS FOR NFORMATION YSTEMS AND RGANIZATIONS\n_________________________________________________________________________________________________\nDiscussion:  The employment of automated tools to report system and information integrity\nviolations and to notify organizational personnel in a timely matter is essential to effective\nrisk response. Personnel with an interest in system and information integrity violations\ninclude mission and business owners, system owners, senior agency information security\nofficial, senior agency official for privacy, system administrators, software developers,\nsystems integrators, information security officers, and privacy officers.\nRelated Controls:  None.\n,,| (3) SOFTWARE FIRMWARE AND INFORMATION INTEGRITY  CENTRALLY MANAGED INTEGRITY TOOLS\nEmploy centrally managed integrity verification tools.\nDiscussion:  Centrally managed integrity verification tools provides greater consistency in the\napplication of such tools and can facilitate more comprehensive coverage of integrity\nverification actions.\niRelated Controls:  AU-3, SI-2, SI-8.s\nb,,|-  (4) SOFTWARE FIRMWARE AND INFORMATION INTEGRITY  TAMPEREVIDENT PACKAGING\n[Withdrawn: Incorporated into SR-9.] t\ni,,|(5) SOFTWARE FIRMWARE AND INFORMATION INTEGRITY  AUTOMATED RESPONSE TO INTEGRITY s\nv VIOLATIONS\nSelection (one or more): shut the system down; restart the system; Automatically [\nimplement Assignment: organization-defined controls[]] when integrity violations are\ndiscovered.\nDiscussion:  Organizations may define different integrity-checking responses by type of f\ninformation, specific information, or a combination of both. Types of information include\ngfirmware, software, and user data. Specific information includes boot firmware for certain\nftypes of machines. The automatic implementation of controls within organizational systems r\nincludes reversing the changes, halting the system, or triggering audit alerts when\nunauthorized modifications to critical security files occur.\nRelated Controls:  None. :\n,,| i(6) SOFTWARE FIRMWARE AND INFORMATION INTEGRITY  CRYPTOGRAPHIC PROTECTION .\nImplement cryptographic mechanisms to detect unauthorized changes to software, /\nfirmware, and information. .\n2Discussion:  Cryptographic mechanisms used to protect integrity include digital signatures\nNand the computation and application of signed hashes using asymmetric cryptography,\nprotecting the confidentiality of the key used to generate the hash, and using the public key\nSto verify the hash information. Organizations that employ cryptographic mechanisms also\n.consider cryptographic key management solutions. 8\nRelated Controls:  SC-12, SC-13. -\n5,,|(7) SOFTWARE FIRMWARE AND INFORMATION INTEGRITY  INTEGRATION OF DETECTION AND\nRESPONSE\nIncorporate the detection of the following unauthorized changes into the organizational\nAssignment: organization-defined security-relevant changes incident response capability: [\nto the system].\nDiscussion:  Integrating detection and response helps to ensure that detected events are\ntracked, monitored, corrected, and available for historical purposes. Maintaining historical\nrecords is important for being able to identify and discern adversary actions over an\nextended time period and for possible legal actions. Security-relevant changes include\nCHAPTER THREE   PAGE 346\nNISTSP800-53,R.5SPCISO                                                               EV                                                                                      ECURITY AND RIVACY ONTROLS FOR NFORMATION YSTEMS AND RGANIZATIONS\n_________________________________________________________________________________________________\nunauthorized changes to established configuration settings or the unauthorized elevation of\nsystem privileges.\n.Related Controls:  AU-2, AU-6, IR-4, IR-5, SI-4\n,,|(8) SOFTWARE FIRMWARE AND INFORMATION INTEGRITY  AUDITING CAPABILITY FOR SIGNIFICANT\nEVENTS\nUpon detection of a potential integrity violation, provide the capability to audit the event\nSelection (one or more): generate an audit record; alert and initiate the following actions: [\ncurrent user; alert Assignment: organization-defined personnel or rolesAssignment: []; [\norganization-defined other actions]].\nDiscussion:  Organizations select response actions based on types of software, specific\nsoftware, or information for which there are potential integrity violations.\nTRelated Controls:  AU-2, AU-6, AU-12.\np,,| (9) SOFTWARE FIRMWARE AND INFORMATION INTEGRITY  VERIFY BOOT PROCESS\nl Assignment: Verify the integrity of the boot process ofthe following system components: [ic\ntorganization-defined system components]. i\nDiscussion:  Ensuring the integrity of boot processes is critical to starting system components is\nain known, trustworthy states. Integrity verification mechanisms provide a level of assurance\nthat only trusted code is executed during boot processes. i\nlRelated Controls:  SI-6. e\n,,| e(10) SOFTWARE FIRMWARE AND INFORMATION INTEGRITY  PROTECTION OF BOOT FIRMWARE\nImplement the following mechanisms to protect the integrity of boot firmware in c\naAssignment:organization-defined system componentsAssignment: organization-[ ]: [\ndefined mechanismse].\noDiscussion:  Unauthorized modifications to boot firmware may indicate a sophisticated,\n:targeted attack. These types of targeted attacks can result in a permanent denial of service\ntor a persistent malicious code presence. These situations can occur if the firmware is p\n:corrupted or if the malicious code is embedded within the firmware. System components /\nocan protect the integrity of boot firmware in organizational systems by verifying the integrity\nand authenticity of all updates to the firmware prior to applying changes to the system r\n1component and preventing unauthorized processes from modifying the boot firmware.\nRelated Controls:  SI-6. 0\n/,,|N(11) SOFTWARE FIRMWARE AND INFORMATION INTEGRITY  CONFINED ENVIRONMENTS WITH LIMITED\nPRIVILEGES T\n[Withdrawn: Moved to CM-7(6).] P\n,,|0 (12) SOFTWARE FIRMWARE AND INFORMATION INTEGRITY  INTEGRITY VERIFICATION\nRequire that the integrity of the following user-installed software be verified prior to r\nAssignment: organization-defined user-installed softwareexecution: [].\nDiscussion:  Organizations verify the integrity of user-installed software prior to execution to\nreduce the likelihood of executing malicious code or programs that contains errors from\nunauthorized modifications. Organizations consider the practicality of approaches to\nverifying software integrity, including the availability of trustworthy checksums from\nsoftware developers and vendors.\nRelated Controls:  CM-11.\n,,|(13) SOFTWARE FIRMWARE AND INFORMATION INTEGRITY  CODE EXECUTION IN PROTECTED\nENVIRONMENTS\nCHAPTER THREE   PAGE 347\nNISTSP800-53,R.5SPCISO                                                               EV                                                                                      ECURITY AND RIVACY ONTROLS FOR NFORMATION YSTEMS AND RGANIZATIONS\n_________________________________________________________________________________________________\n[Withdrawn: Moved to CM-7(7).]\n,,| (14) SOFTWARE FIRMWARE AND INFORMATION INTEGRITY  BINARY OR MACHINE EXECUTABLE CODE\n[Withdrawn: Moved to CM-7(8).]\n,,| (15) SOFTWARE FIRMWARE AND INFORMATION INTEGRITY  CODE AUTHENTICATION\nImplement cryptographic mechanisms to authenticatethe following software or firmware\nAssignment: organization-defined software or firmware components prior to installation: [\ncomponents.]\nDiscussion:  Cryptographic authentication includes verifying that software or firmware\ncomponents have been digitally signed using certificates recognized and approved by\norganizations. Code signing is an effective method to protect against malicious code.\nOrganizations that employ cryptographic mechanisms also consider cryptographic key\nmanagement solutions. h\npRelated Controls:  CM-5, SC-12, SC-13.\nli,,|c(16) SOFTWARE FIRMWARE AND INFORMATION INTEGRITY  TIME LIMIT ON PROCESS EXECUTION\ni oWITHOUT SUPERVISION\nisAssignment: Prohibit processes from executing without supervision for more than [\nvorganization-defined time period].\nDiscussion:  Placing a time limit on process execution without supervision is intended to\napply to processes for which typical or normal execution periods can be determined and\nesituations in which organizations exceed such periods. Supervision includes timers on\nooperating systems, automated responses, and manual oversight and response when system\nprocess anomalies occur. h\ngRelated Controls:  None.\n,,|- (17) SOFTWARE FIRMWARE AND INFORMATION INTEGRITY  RUNTIME APPLICATION SELFPROTECTION  m\nhAssignment: organization-defined controlsImplement [] for application self-protection at\nruntime. s\ndDiscussion:  Runtime application self-protection employs runtime instrumentation to detect\ni.and block the exploitation of software vulnerabilities by taking advantage of information o\nfrom the software in execution. Runtime exploit prevention differs from traditional\nperimeter-based protections such as guards and firewalls which can only detect and block\nattacks by using network information without contextual awareness. Runtime application\nself-protection technology can reduce the susceptibility of software to attacks by monitoring /\nSits inputs and blocking those inputs that could allow attacks. It can also help protect the\n.runtime environment from unwanted changes and tampering. When a threat is detected, S\nruntime application self-protection technology can prevent exploitation and take other .\nactions (e.g., sending a warning message to the user, terminating the user's session, 0\nterminating the application, or sending an alert to organizational personnel). Runtime\n5application self-protection solutions can be deployed in either a monitor or protection\nmode.\nRelated Controls:  SI-16.\nReferences:  [OMB A-130], [FIPS 140-3], [FIPS 180-4], [FIPS 186-4], [FIPS 202], [SP 800-70], [SP\n800-147]."
}