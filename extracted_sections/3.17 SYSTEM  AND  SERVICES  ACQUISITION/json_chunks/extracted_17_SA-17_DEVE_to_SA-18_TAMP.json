{
  "subheading": "SA-17 DEVELOPER SECURITY AND PRIVACY ARCHITECTURE AND DESIGN",
  "start_text": "SSA-17 DEVELOPER SECURITY AND PRIVACY ARCHITECTURE",
  "content": "SSA-17 DEVELOPER SECURITY AND PRIVACY ARCHITECTURE AND DESIGN\nControl:  Require the developer of the system, system component, or system service to produce P\na design specification and security and privacy architecture that: 0\na.Is consistent with the organization\u2019s security and privacy architecture that is an integral part  3\nthe organization\u2019s enterprise architecture;\nb.Accurately and completely describes the required security and privacy functionality, and the\nallocation of controls among physical and logical components; and\nc.Expresses how individual security and privacy functions, mechanisms, and services work\ntogether to provide required security and privacy capabilities and a unified approach to\nprotection.\nDiscussion:  Developer security and privacy architecture and design are directed at external\ndevelopers, although they could also be applied to internal (in-house) development. In contrast,\nPL-8 is directed at internal developers to ensure that organizations develop a security and privacy\nCHAPTER THREE   PAGE 284\nNISTSP800-53,R.5SPCISO                                                               EV                                                                                      ECURITY AND RIVACY ONTROLS FOR NFORMATION YSTEMS AND RGANIZATIONS\n_________________________________________________________________________________________________\narchitecture that is integrated with the enterprise architecture. The distinction between SA-17\nis especially important when organizations outsource the development of systems, and PL-8\nsystem components, or system services and when there is a requirement to demonstrate\nconsistency with the enterprise architecture and security and privacy architecture of the\nISO 15408-2], [ISO 15408-3], and [SP 800-160-1] provide information on security organization. [\narchitecture and design, including formal policy models, security-relevant components, formal\nand informal correspondence, conceptually simple design, and structuring for least privilege and\ntesting.\nRelated Controls:  PL-2, PL-8, PM-7, SA-3, SA-4, SA-8,SC-7.\nControl Enhancements:\n| (1) DEVELOPER SECURITY AND PRIVACY ARCHITECTURE AND DESIGN  FORMAL POLICY MODEL\nRequire the developer of the system, system component, or system service to: h\n(a)Produce, as an integral part of the development process, a formal policy model  p\nbAssignment: organization-defined elements of organizational security describing the [\nand privacy policya] to be enforced; and\nn(b)Prove that the formal policy model is internally consistent and sufficient to enforce\nthe defined elements of the organizational security and privacy policy when\nimplemented. a\nbDiscussion:  Formal models describe specific behaviors or security and privacy policies using\nformal languages, thus enabling the correctness of those behaviors and policies to be\nformally proven. Not all components of systems can be modeled. Generally, formal e\nspecifications are scoped to the behaviors or policies of interest, such as nondiscretionary f\nhaccess control policies. Organizations choose the formal modeling language and approach\ngbased on the nature of the behaviors and policies to be described and the available tools.\nrRelated Controls:  AC-3, AC-4, AC-25. o\n|-h(2) DEVELOPER SECURITY AND PRIVACY ARCHITECTURE AND DESIGN  SECURITYRELEVANT\nCOMPONENTSs\nRequire the developer of the system, system component, or system service to:\n(a)Define security-relevant hardware, software, and firmware; and  r\n(b)Provide a rationale that the definition for security-relevant hardware, software, and\nfirmware is complete.\nDiscussion:  The security-relevant hardware, software, and firmware represent the portion\nIof the system, component, or service that is trusted to perform correctly to maintain\nrequired security properties. .\nRelated Controls:  AC-25, SA-5. .\n-| (3) DEVELOPER SECURITY AND PRIVACY ARCHITECTURE AND DESIGN  FORMAL CORRESPONDENCE5\n5Require the developer of the system, system component, or system service to:\n(a)Produce, as an integral part of the development process, a formal top-level\nspecification that specifies the interfaces to security-relevant hardware, software, and\nfirmware in terms of exceptions, error messages, and effects;\n(b)Show via proof to the extent feasible with additional informal demonstration as\nnecessary, that the formal top-level specification is consistent with the formal policy\nmodel;\n(c)Show via informal demonstration, that the formal top-level specification completely\ncovers the interfaces to security-relevant hardware, software, and firmware;\nCHAPTER THREE   PAGE 285\nNISTSP800-53,R.5SPCISO                                                               EV                                                                                      ECURITY AND RIVACY ONTROLS FOR NFORMATION YSTEMS AND RGANIZATIONS\n_________________________________________________________________________________________________\n(d)Show that the formal top-level specification is an accurate description of the\nimplemented security-relevant hardware, software, and firmware; and\n(e)Describe the security-relevant hardware, software, and firmware mechanisms not\naddressed in the formal top-level specification but strictly internal to the security-\nrelevant hardware, software, and firmware.\nDiscussion:  Correspondence is an important part of the assurance gained through modeling.\nIt demonstrates that the implementation is an accurate transformation of the model, and\nthat any additional code or implementation details that are present have no impact on the\nbehaviors or policies being modeled. Formal methods can be used to show that the high-\nlevel security properties are satisfied by the formal system description, and that the formal\nsystem description is correctly implemented by a description of some lower level, including a\nhardware description. Consistency between the formal top-level specification and the formal\npolicy models is generally not amenable to being fully proven. Therefore, a combination of T\niformal and informal methods may be needed to demonstrate such consistency. Consistency s\nbetween the formal top-level specification and the actual implementation may require the u\nluse of an informal demonstration due to limitations on the applicability of formal methods ic\ntto prove that the specification accurately reflects the implementation. Hardware, software,\nand firmware mechanisms internal to security-relevant components include mapping\nregisters and direct memory input and output. a\nRelated Controls:  AC-3, AC-4, AC-25, SA-4, SA-5. i\nle| (4) DEVELOPER SECURITY AND PRIVACY ARCHITECTURE AND DESIGN  INFORMAL CORRESPONDENCE\neRequire the developer of the system, system component, or system service to:\n(a)Produce, as an integral part of the development process, an informal descriptive top- c\nalevel specification that specifies the interfaces to security-relevant hardware,\nsoftware, and firmware in terms of exceptions, error messages, and effects; e\noSelection: informal demonstration; convincing argument with formal (b)Show via [  m\n:methods as feasible] that the descriptive top-level specification is consistent with the\ntformal policy model; p\n/(c)Show via informal demonstration, that the descriptive top-level specification  /\ncompletely covers the interfaces to security-relevant hardware, software, and i.\nrfirmware; g\n0(d)Show that the descriptive top-level specification is an accurate description of the\n0interfaces to security-relevant hardware, software, and firmware; and\n/(e)Describe the security-relevant hardware, software, and firmware mechanisms not  N\naddressed in the descriptive top-level specification but strictly internal to the security-\nSrelevant hardware, software, and firmware.\n8Discussion:  Correspondence is an important part of the assurance gained through modeling.\nIt demonstrates that the implementation is an accurate transformation of the model, and\nthat additional code or implementation detail has no impact on the behaviors or policies\nbeing modeled. Consistency between the descriptive top-level specification (i.e., high-\nlevel/low-level design) and the formal policy model is generally not amenable to being fully\nproven. Therefore, a combination of formal and informal methods may be needed to show\nsuch consistency. Hardware, software, and firmware mechanisms strictly internal to\nsecurity-relevant hardware, software, and firmware include mapping registers and direct\nmemory input and output.\nRelated Controls:  AC-3, AC-4, AC-25, SA-4, SA-5.\n| (5) DEVELOPER SECURITY AND PRIVACY ARCHITECTURE AND DESIGN  CONCEPTUALLY SIMPLE DESIGN\nRequire the developer of the system, system component, or system service to:\nCHAPTER THREE   PAGE 286\nNISTSP800-53,R.5SPCISO                                                               EV                                                                                      ECURITY AND RIVACY ONTROLS FOR NFORMATION YSTEMS AND RGANIZATIONS\n_________________________________________________________________________________________________\n(a)Design and structure the security-relevant hardware, software, and firmware to use a\ncomplete, conceptually simple protection mechanism with precisely defined\nsemantics; and\n(b)Internally structure the security-relevant hardware, software, and firmware with\nspecific regard for this mechanism.\nDiscussion:  The principle of reduced complexity states that the system design is as simple\nand small as possible (see SA-8(7)). A small and simple design is easier to understand and\nanalyze and is also less prone to error (see AC-25, SA-8(13)). The principle of reduced\ncomplexity applies to any aspect of a system, but it has particular importance for security\ndue to the various analyses performed to obtain evidence about the emergent security\nproperty of the system. For such analyses to be successful, a small and simple design is\nessential. Application of the principle of reduced complexity contributes to the ability of\nsystem developers to understand the correctness and completeness of system security T\nifunctions and facilitates the identification of potential vulnerabilities. The corollary of s\nreduced complexity states that the simplicity of the system is directly related to the number u\nlof vulnerabilities it will contain. That is, simpler systems contain fewer vulnerabilities. An ic\ntimportant benefit of reduced complexity is that it is easier to understand whether the\nsecurity policy has been captured in the system design and that fewer vulnerabilities are\nlikely to be introduced during engineering development. An additional benefit is that any a\nasuch conclusion about correctness, completeness, and existence of vulnerabilities can be\nreached with a higher degree of assurance in contrast to conclusions reached in situations b\nwhere the system design is inherently more complex.\neRelated Controls:  AC-25, SA-8, SC-3.\n| (6) DEVELOPER SECURITY AND PRIVACY ARCHITECTURE AND DESIGN  STRUCTURE FOR TESTINGh\ngRequire the developer of the system, system component, or system service to structure\nfsecurity-relevant hardware, software, and firmware to facilitate testing. r\n] promotes complete, Discussion:  Applying the security design principles in [SP 800-160-1:\ntconsistent, and comprehensive testing and evaluation of systems, system components, and\nservices. The thoroughness of such testing contributes to the evidence produced to generate :\nan effective assurance case or argument as to the trustworthiness of the system, system\nocomponent, or service.\n1Related Controls:  SA-5, SA-11.\n0| (7) DEVELOPER SECURITY AND PRIVACY ARCHITECTURE AND DESIGN  STRUCTURE FOR LEAST PRIVILEGE\nNRequire the developer of the system, system component, or system service to structure\nsecurity-relevant hardware, software, and firmware to facilitate controlling access with\nSleast privilege.\n8Discussion:  The principle of least privilege states that each component is allocated sufficient\nprivileges to accomplish its specified functions but no more (see SA-8(14)). Applying the -\nprinciple of least privilege limits the scope of the component\u2019s actions, which has two r\ndesirable effects. First, the security impact of a failure, corruption, or misuse of the system\ncomponent results in a minimized security impact. Second, the security analysis of the\ncomponent is simplified. Least privilege is a pervasive principle that is reflected in all aspects\nof the secure system design. Interfaces used to invoke component capability are available to\nonly certain subsets of the user population, and component design supports a sufficiently\nfine granularity of privilege decomposition. For example, in the case of an audit mechanism,\nthere may be an interface for the audit manager, who configures the audit settings; an\ninterface for the audit operator, who ensures that audit data is safely collected and stored;\nand, finally, yet another interface for the audit reviewer, who only has a need to view the\naudit data that has been collected but no need to perform operations on that data.\nCHAPTER THREE   PAGE 287\nNISTSP800-53,R.5SPCISO                                                               EV                                                                                      ECURITY AND RIVACY ONTROLS FOR NFORMATION YSTEMS AND RGANIZATIONS\n_________________________________________________________________________________________________\nIn addition to its manifestations at the system interface, least privilege can be used as a\nguiding principle for the internal structure of the system itself. One aspect of internal least\nprivilege is to construct modules so that only the elements encapsulated by the module are\ndirectly operated upon by the functions within the module. Elements external to a module\nthat may be affected by the module\u2019s operation are indirectly accessed through interaction\n(e.g., via a function call) with the module that contains those elements. Another aspect of\ninternal least privilege is that the scope of a given module or component includes only those\nsystem elements that are necessary for its functionality, and the access modes to the\nelements (e.g., read, write) are minimal.\n. Related Controls:  AC-5, AC-6, SA-8\n|(8) DEVELOPER SECURITY AND PRIVACY ARCHITECTURE AND DESIGN  ORCHESTRATION\nAssignment: organization-defined critical systems or system componentsDesign [] with\nhAssignment: organization-coordinated behavior to implement the following capabilities: [\ndefined capabilities, by system or component]. p\nDiscussion:  Security resources that are distributed, located at different layers or in different lic\nsystem elements, or are implemented to support different aspects of trustworthiness can t\nninteract in unforeseen or incorrect ways. Adverse consequences can include cascading\nfailures, interference, or coverage gaps. Coordination of the behavior of security resources\n(e.g., by ensuring that one patch is installed across all resources before making a a\nconfiguration change that assumes that the patch is propagated) can avert such negative\ninteractions.\nRelated Controls:  None. e\nc|(9) DEVELOPER SECURITY AND PRIVACY ARCHITECTURE AND DESIGN  DESIGN DIVERSITY\nAssignment: organization-defined critical systems or system Use different designs for [g\ncomponents] to satisfy a common set of requirements or to provide equivalent f\nmfunctionality.\nDiscussion:  Design diversity is achieved by supplying the same requirements specification to t\nsmultiple developers, each of whom is responsible for developing a variant of the system or\ndsystem component that meets the requirements. Variants can be in software design, in\ni.hardware design, or in both hardware and a software design. Differences in the designs of o\nthe variants can result from developer experience (e.g., prior use of a design pattern), design\nstyle (e.g., when decomposing a required function into smaller tasks, determining what\nconstitutes a separate task and how far to decompose tasks into sub-tasks), selection of\nlibraries to incorporate into the variant, and the development environment (e.g., different /\nSdesign tools make some design patterns easier to visualize). Hardware design diversity\n.includes making different decisions about what information to keep in analog form and what S\ninformation to convert to digital form, transmitting the same information at different times, .\nand introducing delays in sampling (temporal diversity). Design diversity is commonly used 0\nto support fault tolerance.\nRelated Controls:  None.\nReferences:  [ISO 15408-2], [ISO 15408-3], [SP 800-160-1]."
}