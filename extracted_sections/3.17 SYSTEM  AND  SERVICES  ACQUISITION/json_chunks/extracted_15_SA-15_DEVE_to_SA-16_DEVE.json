{
  "subheading": "SA-15 DEVELOPMENT PROCESS, STANDARDS, AND TOOLS",
  "start_text": "SA-15 DEVELOPMENT PROCESS, STANDARDS, AND TOOLS\nCo",
  "content": "SA-15 DEVELOPMENT PROCESS, STANDARDS, AND TOOLS\nControl:\na.Require the developer of the system, system component, or system service to follow a\ndocumented development process that:\ni1.Explicitly addresses security and privacy requirements;  s\nb2.Identifies the standards and tools used in the development process;\n3.Documents the specific tool options and tool configurations used in the development  t\nprocess; and\n4.Documents, manages, and ensures the integrity of changes to the process and/or tools  v\niused in development; and la\nb.Review the development process, standards, tools, tool options, and tool configurations\nAssignment: organization-defined frequency[] to determine if the process, standards, tools, e\ntool options and tool configurations selected and employed can satisfy the following security\nhAssignment: organization-defined security and privacy and privacy requirements: [\nrequirements]. g\nDiscussion:  Development tools include programming languages and computer-aided design o\nsystems. Reviews of development processes include the use of maturity models to determine the :\ntpotential effectiveness of such processes. Maintaining the integrity of changes to tools and t\nprocesses facilitates effective supply chain risk assessment and mitigation. Such integrity requires :\nconfiguration control throughout the system development life cycle to track authorized changes o\noand prevent unauthorized changes.\nRelated Controls:  MA-6, SA-3, SA-4, SA-8, SA-10, SA-11, SR-3, SR-4, SR-5, SR-6, SR-9. 0\n2Control Enhancements:\n,,|I (1) DEVELOPMENT PROCESS STANDARDS AND TOOLS  QUALITY METRICSS\nRequire the developer of the system, system component, or system service to: S\n8(a)Define quality metrics at the beginning of the development process; and\n-Selection (one or more):(b)Provide evidence of meeting the quality metrics [\nAssignment: organization-defined frequency; Assignment: organization-defined [][r\nprogram review milestones; upon delivery]].\nDiscussion:  Organizations use quality metrics to establish acceptable levels of system\nquality. Metrics can include quality gates, which are collections of completion criteria or\nsufficiency standards that represent the satisfactory execution of specific phases of the\nsystem development project. For example, a quality gate may require the elimination of all\ncompiler warnings or a determination that such warnings have no impact on the\neffectiveness of required security or privacy capabilities. During the execution phases of\ndevelopment projects, quality gates provide clear, unambiguous indications of progress.\nOther metrics apply to the entire development project. Metrics can include defining the\nseverity thresholds of vulnerabilities in accordance with organizational risk tolerance, such\nCHAPTER THREE   PAGE 281\nNISTSP800-53,R.5SPCISO                                                               EV                                                                                      ECURITY AND RIVACY ONTROLS FOR NFORMATION YSTEMS AND RGANIZATIONS\n_________________________________________________________________________________________________\nas requiring no known vulnerabilities in the delivered system with a Common Vulnerability\nScoring System (CVSS) severity of medium or high.\nRelated Controls:  None.\n,,| (2) DEVELOPMENT PROCESS STANDARDS AND TOOLS  SECURITY AND PRIVACY TRACKING TOOLS\nRequire the developer of the system, system component, or system service to select and\nemploy security and privacy tracking tools for use during the development process.\nDiscussion:  System development teams select and deploy security and privacy tracking\ntools, including vulnerability or work item tracking systems that facilitate assignment,\nsorting, filtering, and tracking of completed work items or tasks associated with\ndevelopment processes.\nRelated Controls:  SA-11.\nh,,| (3) DEVELOPMENT PROCESS STANDARDS AND TOOLS  CRITICALITY ANALYSIS\nRequire the developer of the system, system component, or system service to perform a u\nlcriticality analysis: ic\nAssignment: (a)At the following decision points in the system development life cycle: [i o\norganization-defined decision points in the system development life cycle ]; and\nAssignment: organization-defined breadth and depth (b)At the following level of rigor: [ v\niof criticality analysis]. la\nleDiscussion:  Criticality analysis performed by the developer provides input to the criticality\nanalysis performed by organizations. Developer input is essential to organizational criticality e\nanalysis because organizations may not have access to detailed design documentation for o\ncsystem components that are developed as commercial off-the-shelf products. Such design\ndocumentation includes functional specifications, high-level designs, low-level designs, r\nsource code, and hardware schematics. Criticality analysis is important for organizational\nsystems that are designated as high value assets. High value assets can be moderate- or  m\nhigh-impact systems due to heightened adversarial interest or potential adverse effects on\ntthe federal enterprise. Developer input is especially important when organizations conduct p\nsupply chain criticality analyses. /\nRelated Controls:  RA-9. i.\n/,,|(4) DEVELOPMENT PROCESS STANDARDS AND TOOLS  THREAT MODELING AND VULNERABILITY 1\n6ANALYSIS\n8[Withdrawn: Incorporated into SA-11(2).]\n,,| (5) DEVELOPMENT PROCESS STANDARDS AND TOOLS  ATTACK SURFACE REDUCTION\nRequire the developer of the system, system component, or system service to reduce P\nAssignment: organization-defined thresholdsattack surfaces to [].\nDiscussion:  Attack surface reduction is closely aligned with threat and vulnerability analyses 5\nrand system architecture and design. Attack surface reduction is a means of reducing risk to 5\norganizations by giving attackers less opportunity to exploit weaknesses or deficiencies (i.e.,\npotential vulnerabilities) within systems, system components, and system services. Attack\nsurface reduction includes implementing the concept of layered defenses, applying the\nprinciples of least privilege and least functionality, applying secure software development\npractices, deprecating unsafe functions, reducing entry points available to unauthorized\nusers, reducing the amount of code that executes, and eliminating application programming\ninterfaces (APIs) that are vulnerable to attacks.\nRelated Controls:  AC-6, CM-7, RA-3, SA-11.\n,,| (6) DEVELOPMENT PROCESS STANDARDS AND TOOLS  CONTINUOUS IMPROVEMENT\nCHAPTER THREE   PAGE 282\nNISTSP800-53,R.5SPCISO                                                               EV                                                                                      ECURITY AND RIVACY ONTROLS FOR NFORMATION YSTEMS AND RGANIZATIONS\n_________________________________________________________________________________________________\nRequire the developer of the system, system component, or system service to implement\nan explicit process to continuously improve the development process.\nDiscussion:  Developers of systems, system components, and system services consider the\neffectiveness and efficiency of their development processes for meeting quality objectives\nand addressing the security and privacy capabilities in current threat environments.\nRelated Controls:  None.\n,,| (7) DEVELOPMENT PROCESS STANDARDS AND TOOLS  AUTOMATED VULNERABILITY ANALYSIS\nAssignment: Require the developer of the system, system component, or system service [\norganization-defined frequency] to:\nAssignment: organization-defined (a)Perform an automated vulnerability analysis using [\ntools];\n(b)Determine the exploitation potential for discovered vulnerabilities;  h\n(c)Determine potential risk mitigations for delivered vulnerabilities; and  p\nAssignment: (d)Deliver the outputs of the tools and results of the analysis to [ lic\norganization-defined personnel or roles]. t\nDiscussion:  Automated tools can be more effective at analyzing exploitable weaknesses or\ndeficiencies in large and complex systems, prioritizing vulnerabilities by severity, and a\naproviding recommendations for risk mitigations.\nRelated Controls:  RA-5, SA-11. le\ne,,|(8) DEVELOPMENT PROCESS STANDARDS AND TOOLS  REUSE OF THREAT AND VULNERABILITY e\nINFORMATIONf\nRequire the developer of the system, system component, or system service to use threat a\nmodeling and vulnerability analyses from similar systems, components, or services to e\nrinform the current development process.\n:Discussion:  Analysis of vulnerabilities found in similar software applications can inform\npotential design and implementation issues for systems under development. Similar systems t\n:or system components may exist within developer organizations. Vulnerability information is\navailable from a variety of public and private sector sources, including the NIST National o\nVulnerability Database.\nRelated Controls:  None.\n,,| (9) DEVELOPMENT PROCESS STANDARDS AND TOOLS  USE OF LIVE DATA 2\nN[Withdrawn: Incorporated into SA-3(2).]\n,,|. (10) DEVELOPMENT PROCESS STANDARDS AND TOOLS  INCIDENT RESPONSE PLANS\n.Require the developer of the system, system component, or system service to provide, 8\n0implement, and test an incident response plan.\nDiscussion:  The incident response plan provided by developers may provide information not r\nreadily available to organizations and be incorporated into organizational incident response\nplans. Developer information may also be extremely helpful, such as when organizations\nrespond to vulnerabilities in commercial off-the-shelf products.\nRelated Controls:  IR-8.\n,,| (11) DEVELOPMENT PROCESS STANDARDS AND TOOLS  ARCHIVE SYSTEM OR COMPONENT\nRequire the developer of the system or system component to archive the system or\ncomponent to be released or delivered together with the corresponding evidence\nsupporting the final security and privacy review.\nCHAPTER THREE   PAGE 283\nNISTSP800-53,R.5SPCISO                                                               EV                                                                                      ECURITY AND RIVACY ONTROLS FOR NFORMATION YSTEMS AND RGANIZATIONS\n_________________________________________________________________________________________________\nDiscussion:  Archiving system or system components requires the developer to retain key\ndevelopment artifacts, including hardware specifications, source code, object code, and\nrelevant documentation from the development process that can provide a readily available\nconfiguration baseline for system and component upgrades or modifications.\nRelated Controls:  CM-2.\n,,|(12) DEVELOPMENT PROCESS STANDARDS AND TOOLS  MINIMIZE PERSONALLY IDENTIFIABLE\nINFORMATION\nRequire the developer of the system or system component to minimize the use of\npersonally identifiable information in development and test environments.\nDiscussion:  Organizations can minimize the risk to an individual\u2019s privacy by using\ntechniques such as de-identification or synthetic data. Limiting the use of personally\nidentifiable information in development and test environments helps reduce the level of T\niprivacy risk created by a system. s\nu Related Controls:  PM-25, SA-3, SA-8.\naReferences:  [SP 800-160-1], [IR 8179]."
}